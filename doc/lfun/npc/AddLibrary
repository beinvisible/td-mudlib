FUNKTION:
	void AddLibrary (string library, int level);
	void AddLibrary (string library, int level, int localflag);

DEFINIERT IN:
	/std/npc/info.c

ARGUMENTE:
	library - Dateiname einer Bibliothek
	level - Wissenslevel
	localflag - Flag fuer Sicherung

BESCHREIBUNG:
	Mit AddLibrary() kann man einem NPC das Wissen einer gesamten
	Bibliothek beibringen. Eine Bibliothek (Library) ist eine Textdatei,
	die einem bestimmten Format unterliegt. Der Wissenslevel ist hierbei
	eine Zahl, die aussagt, wie gut der NPC ueber die Informationen
	in der Bibliothek Bescheid weiss. Je niedriger die Zahl,
	desto geringer sein Fachwissen. Anders ausgedrueckt, der NPC
	bekommt aus der Bibliothek die Information, deren Wissenslevel
	kleiner oder gleich dem Wissenslevel des NPCs ist.

	Wenn ein Spieler einen NPC mittels "frage <NPC> nach <begriff>"
	nach einer Information fragt, so wird zunaechst die Wissensbasis
	des NPCs durchsucht - alles was man dem NPC via AddInfo() gibt.
	War diese Suche erfolglos, so werden alle via AddLibrary()
	hinzugefuegten Bibliotheken durchsucht. In der Regel speichert
	der Libmaster (/secure/libmaster.c) diese Infos selbst, wodurch
	Speicher gespart wird. Mit einem localflag ungleich 0 kann man
	allerdings den Libmaster umgehen und die Informationen direkt im NPC
	speichern, als waeren es lauter AddInfo()-Zeilen. Dies ist bei
	Bibliotheken, die nur von diesem einen NPC genutzt werden, durchaus
	sinnvoll.

	Die in AddLibrary() uebergebenen Bibliotheken sind Textdateien,
	die das folgende Format haben:

	# Kommentar
	info:<level>:<key1>[,<key2>,<key3>...]
	[indent:"<indentstring>"]
	[silent:"<silentstring>"]
	[race:<rassenname|0>]
	[options:["keepnl"]]
	text...

	Die Schluesselwoerter im einzelnen:
	info:   - leitet einen neuen Informationsblock ein.
		- nach einem Doppelpunkt folgt der Wissenslevel
		- nach einem weiteren Doppelpunkt folgt eine durch Kommas
		  getrennte Liste von Begriffen, auf die der NPC bei
		  Befragung reagieren soll (Unnoetige Leerzeichen vermeiden!)
	indent: - legt einen Einrueckstring fest (selbe Bedeutung wie
		  bei AddInfo()), entweder in doppelten Hochkomma, oder
		  einfach nur als Text (in dem Fall wird automatisch ein
		  Leerzeichen angehaengt).
		- Ist "indent:" nicht gesetzt, wird automatisch "sagt: "
		  uebernommen.
	silent: - legt einen Alternativtext fest (selbe Bedeutung wie
		  bei AddInfo()), entweder in doppelten Hochkomma, oder
		  einfach nur als Text (in dem Fall wird automatisch ein
		  Leerzeichen angehaengt).
		- Oder 0 oder 1. Siehe Dokumentation zu AddInfo()
	race:   - Die Info gilt nur fuer diese Rasse
		- Vorsicht: wenn bei der Befragung eine Info fuer den
		  entsprechenden Wissenslevel gefunden wurde, aber die Rasse
		  nicht passt, wird nicht noch weiter nach Infos fuer
		  niedrigere Wissenslevel gesucht
	options:  legt diverse Optionen fest, durch Komma getrennt.
		  Im Moment gibt es nur die Option "keepnl", d.h. die im
		  Text enthaltenen Zeilenumbrueche werden beibehalten.
	Zuletzt folgt der Antwort-Text (beliebig viele Zeilen), bis erneut
	eine "info:"-Zeile den naechsten Informationsblock einleitet.
	Der Text wird bei der Ausgabe durch den NPC automatisch umgebrochen
	(ausser bei Option keepnl).
	Saemtliche Zeilen, die mit '#' beginnen, werden ignoriert.

	Achtung: Nach den Schluesselwoertern und zwischen den durch Komma
	getrennten Fragewoertern keine unnoetigen Leerzeichen verwenden!

	Man sollte nach Moeglichkeit jede einzelne der so definierten
	Infos gleich direkt durch Befragen des NPCs austesten, da einem
	hier leicht Formatierungsfehler unterlaufen koennen.

	Hat man eine Bibliothek veraendert, die vom Libmaster gerade
	geladen ist, so kann man diese vom Libmaster entladen lassen,
	indem man die Funktion DiscardLib() verwendet.
	Beispiel:
	xcall /secure/libmaster->DiscardLib("/gilden/files.sw/lib/sw.lib")
	Das Updaten der NPCs kann man sich in diesem Fall sparen (es
	sei denn man hat die Bibliothek mit localflag != 0 geladen).
	Die Bibliothek wird automatisch neu geladen, sobald ein NPC,
	der diese Bibliothek verwendet, erneut befragt wird.

	Informationen ueber den Status des Libmasters und die gerade
	geladenen Bibliotheken sind ueber die Funktion Stat() verfuegbar:
	xcall /secure/libmaster->Stat()

BEISPIEL

	# beispiel.lib
	#
	# Es geht darum, wo sich ein Amulett befindet.
	#
	info:1:amulett,schutzamulett
	indent:brabbelt
	Amulett? Es gibt viele Amulette.
	info:2:schutzamulett
	Das Schutzamulett soll ziemlich gut bewacht werden. Ich glaube, von
	gruenen Zauberern, aber ich weiss nicht, wo.
	info:3:schutzamulett
	indent:meint:
	Das Schutzamulett soll im gruenen Zaubererturm bewacht werden, von
	fiesen gruenen Zauberern.
	# ende Beispiel.lib

	Der NPC dazu:

	void create()
	{
	...
	    AddLibrary("beispiel.lib", 3);
	...
	}

	Dieser NPC reagiert dann auf frage xxx nach schutzamulett mit der
	Antwort auf 'info:3', und bei 'amulett' auf 'info:1', da er nichts
	besseres weiss.

RUECKGABEWERT:
	keiner

SIEHE AUCH:
	AddInfo, RemoveInfo, GetInfo, RemoveLibrary, /secure/libmaster.c
