
Generelle Richtlinien zur Programmierung
========================================

1. Aeussere Form
----------------

LPC ist wie auch C, C++ etc. eine strukturierte Programmiersprache.
Diese Strukturierung sollte nach Moeglichkeit auch optisch im
Source Code zutage treten, man sollte sich bei der Programmierung
also etwa auch ein einheitliches Einrueckschema aneignen, etwa
das Einruecken um ein vielfaches von 2 Leerzeichen, Setzen von
geschwungenen Klammern, Verwenden von Whitespaces, Deklarieren
des Typs von Parametern und Rueckgabewerten, etc.

Beispiel:

int BigEnemy(object *en)
{
  int i;
  for (i=0; i<sizeof(en)-1; i++)
  {
    if (en[i]->QueryProp(P_SIZE) > 180) return 1;
  }
}

ist wesentlich besser lesbar als

BigEnemy(en) {
int i;for(i=0;i<sizeof(en)-1;i++)if(en[i]->QueryProp(P_SIZE)>180)return 1;}


2. Konstanten
-------------

Desweiteren empfiehlt sich generell die Vermeidung von Konstanten
im Sourcecode, stattdessen sollte man weitestgehend auf #defines
zurueckgreifen. Auch und insbesondere gilt dies fuer Pfade, etwa
die Ausgaenge eines Raumes, man sollte hier sprechende #defines
in einem Header file (z.B. files.h) zusammenfassen, das von allen
Raeumen (room*.c) per #include (z.B. #include "files.h") eingebunden
wird.

Beispiel:

#define BURG(x) ("/d/ebene/lamuerte/burg/"+x)
#define ROOM(x) BURG("room/"+x)
#define NPC(x) BURG("npc/"+x)
#define OBJ(x) BURG("obj/"+x)

Statt "/d/ebene/lamuerte/burg/room/1x2y.c" verwendet man dann
das wesentlich leichter lesbare ROOM("1x2y"). Ein weiterer Vorteil
ist die leichtere Verschiebbarkeit eines gesamten Gebietes in einen
anderen Verzeichnisast, etwa wenn man im nachhinein draufkommt, dass
sich ein Gebiet wesentlich besser in eine andere Region integrieren
laesst (abgesehen davon, dass sich solche Faelle durch ein Konzept,
das VOR dem Programmieren ausgearbeitet werden sollte, in Grenzen
halten sollte). Man beachte weiters, dass das abschliessende ".c"
meistens (bei lfun's) nicht angegeben werden muss, ja, sogar nicht
angegeben werden soll. Bei Schluesseln (QueryDoorKey()) kann sich
diese Kleinigkeit als kaum auffindbare Fehlermoeglichkeit heraus-
stellen...


3. Verzeichnisstruktur
----------------------

Es empfiehlt sich, sich eine einheitliche Verzeichnisstruktur zu
ueberlegen, um die vielen Dateien, die bei einem groesseren Gebiet
anfallen, uebersichtlich zu strukturieren.

Beispiel:

/d/ebene/lamuerte/burg/            Eine Burg
                       room/         die Raeume dort
                       npc/          die Monster von dort
                       obj/          die diversen Objekte

Weitere Unterteilungen wie obj/div/, obj/waffe/, obj/ruestung/ oder
room/weg/, room/kanal/, room/amtshaus/ oder aehnliche koennen bei
groesseren Gebieten durchaus auch Sinn machen.


Woody@SilberLand.
Samtpfote@Tamedhon.

