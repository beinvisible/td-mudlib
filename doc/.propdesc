P_LIGHT
// Greift auf den Lichtlevel zu. Handle with care !!!

P_NAME
// In dieser Property wird der Name des Objektes gespeichert. Er
// sollte nur aus einem Wort bestehen. Der Name dient dazu, das
// Objekt in einem Satz zu erwaehnen und wird auch dekliniert.

P_NAME_ADJ
// In dieser Property kann ein Adjektiv abgelegt werden, dass dann
// bei der Ausgabe mittels name() mitbenutzt wird.
// (In der Regel nicht noetig.)

P_SHORT
// In dieser Property wird die Kurzbeschreibung des Objektes
// gespeichert, die beim Umschauen im Raum oder bei der Ausgabe
// des Inventars ausgegeben wird. Fuer unsichtbare Objekte
// sollte sie 0 sein.

P_LONG
// Unter dieser Property wird die Beschreibung gespeichert, die
// bei der Untersuchung des Objektes ausgegeben wird.

P_WEIGHT
// Das Gewicht eines Objetes in Gramm.

P_VALUE
// Wert des Objektes in Goldmuenzen. Diesen Wert erhaelt man beim 
// Verkauf. Kaufen kostet ein Vielfaches hiervon.

P_IDS
// Hier werden die Bezeichnungen abgespeichert, unter denen sich das
// Objekt angesprochen fuehlt.
// Sollte nur mittels AddId( id ); gesetzt werden.

P_ADJECTIVES
// Hier werden Adjektive gespeichert, unter denen sich das Objekt
// angesprochen fuehlt. So sind Kombinationen der Synonyme mit
// mehreren Adjektiven moeglich. Ggf sollte auch der deklinierte
// Fall des Adjektives eingegeben werden.
// Sollte nur mittels AddAdjective( adjective ); gesetzt werden.

P_INFO
// Geheime Information, die ggf. ueber einen Zauberspruch
// von Spielern ermittelt werden kann.

P_READ_MSG
// Hier koennen Informationen gespeichert werden, die beim Lesen
// des Objektes ausgegeben werden.

P_UID
// Simulation des Zugriffs auf die uid.

P_EUID
// Simulation des Zugriffs auf die euid.

P_AUTOLOADOBJ
// Mit dieser Property werden Autoloadobjekte verwaltet.
// Der Inhalt der Property sind die permanenten Eigenschaften des
// Objektes, die der Spieler uebers ausloggen hinweg beibehaelt.
// Beim Einloggen werden sie automatisch neu gesetzt. (ACHTUNG:
// Die Property muss intern selbst verwaltet werden.)
// Autoloadobjekte werden beim Ausloggen nicht fallengelassen!

P_NOGET
// Diese Property enthaelt eine Meldung, die ausgegeben wird, wenn
// jemand versucht, dieses Objekt zu nehmen. Wird die Prop. auf einen
// nicht-String-Wert gesetzt, so wird eine Defaultmeldung ausgegeben.

P_NODROP
// Diese Property enthaelt eine Meldung, die ausgegeben wird, wenn
// jemand versucht, das Objekt fallen zu lassen. Wird die Prop.  auf einen 
// nicht-String-Wert gesetzt, so wird eine Defaultmeldung ausgegeben.

P_NOBUY
// Wenn diese Property gesetzt ist, wird das Objekt nach einem
// Verkauf im Laden zerstoert, damit es nicht wieder von einem Spieler
// gekauft werden kann.

P_NEVERDROP
// Objekte mit dieser Property werden beim Tod des Spielers nicht
// in den Leichnam gelegt.
// P_NODROP wird automatisch mitgesetzt.

P_NR_HANDS
// Anzahl der Haende, die man zur Benuztung des Objektes benoetigt.

P_MAGIC
// Dieses Objekt ist magisch.

P_MAX_WEIGHT
// Maximales Gewicht in Gramm, das in dem Container verstaut werden
// kann.

P_TOTAL_WEIGHT
// Gewicht incl. Inhalt in Gramm. P_WEIGHT_PERCENT wird beruecksichtigt.

P_TRANSPARENT
// ist != 0, wenn hinein oder hinausgeschaut werden kann.

P_CNT_STATUS
// Status des Containers (offen, geschlossen, abgeschlossen)
// siehe auch /sys/container.h

P_CNT_KEY
// Signalisiert, wenn gesetzt, dass der Container einen Schluessel
// zum Oeffnen und/oder Schliessen benoetigt. Der Inhalt der Property
// kann frei gesetzt werden.
// Beispiel in /obj/container.c (Property definiert in /sys/container.h)

P_WEIGHT_PERCENT
// Diese Property gibt an, wieviel Prozent des Gewichts des Inhaltes
// "nach aussen" wiedergegeben werden.

P_INT_SHORT
// Kurzbeschreibung, wenn man sich im Inneren des Containers
// befindet.

P_INT_LONG
// Beschreibung, die man bekommt, wenn man sich in dem Container
// umschaut.

P_DETAILS
// Diese Property enthaelt ein mapping, in der Objekt im Raum
// definiert werden und Beschreibungen, die ausgegeben werden,
// wenn man sich diese Details anschaut.

P_SPECIAL_DETAILS
// Mapping von Details, die beim Anschauen eine Funktion starten.

P_READ_DETAILS
// Details, die durch Lesen ermittelt werden koennen.

P_ROOM_MSG
// Liste mit Meldungen, die zufaellig im Raum ausgegeben werden.

P_FUNC_MSG
// Liste mit Funktionen, die zufaellig im Raum aufgerufen werden.

P_MSG_PROB
// Numerischer Wert fuer Wahrscheinlichkeit, mit der die Meldungen
// und/oder die Funktionen ausgegeben/aufgerufen werden.

P_EXITS
// Alist aller unmittelbar sichtbaren Ausgaenge mit zugehoerigen
// Nachbarraeumen. Sollte nur mittels AddExit() benutzt werden.

P_SPECIAL_EXITS
// Dito, aber anstatt des Nachbarraums wird eine Funktion (im Raum)
// angegebem, die bei Eingabe der Richtung ausgefuehrt wird.

P_DOORS
// wird nicht(mehr) benutzt und fliegt demnaechst raus.

P_DOORS2
// wird nicht(mehr) benutzt und fliegt demnaechst raus.

P_COMMANDS
// Enthaelt ein Mapping mit Kommandos, die ein Objekt oder
// Raum definiert. Sollte nur mittels AddCmd/RemoveCmd
// manipuliert werden.

P_ITEMS
// Definition von Gegenstaenden, die in dem Raum liegen sollen.
// Erklaerung in einem Extrafile.

P_NO_TPORT
// Kann folgende Werte annnehmen (definiert in moving.h):
// NO_TPORT_IN  = Man kann nicht in den Raum hinein teleportieren.
// NO_TPORT_OUT = Man kann nicht aus dem Raum hinaus teleportieren.
// NO_TPORT     = Weder noch.

P_INDOORS
// Gesetzt, wenn von dem Raum aus der Himmel nicht sichtbar ist.
// Dinge wie Wetter oder Mondaufgaenge werden in solchen Raeumen
// nicht gezeigt.

P_NOMAGIC
// Angabe in Prozent, mit welcher Wahrscheinlichkeit in einem
// Raum nicht gezaubert werden kann. Bei NPC's zeigt es die
// Resistenz gegen Magie an.

P_ORAKEL
// Wenn diese Property gesetzt ist, kann das 'Orakel' (NPC, den
// man nach Quests befragt, im MG der 'alte Wanderer', im AL das
// 'Burggespenst') in den Raum hinein.

P_ALIGN
// Numerischer Wert fuer Gut- oder Boesheit des Wesens.

P_RACE
// String mit der Rasse des Wesens.

P_GENDER
// Grammatikalisches Geschlecht des Objektes:
// (Definiert in language.h) MALE, FEMALE oder NEUTER

P_ATTRIBUTES
// Alist mit den Attributen des Wesens.

P_FOOD
// Numerischer Wert fuer Saettigungsgrad des Wesens.

P_DRINK
// Numerischer Wert fuer Saettigung des Wesens mit Getraenken.

P_ALCOHOL
// Num. Wert fuer Besoffenheit.

P_MAX_FOOD
// Numerischer Wert fuer die maximale Saettigung des Wesens.

P_MAX_DRINK
// Numerischer Wert fuer die maximale 'Wassermenge' im Wesen.

P_MAX_ALCOHOL
// Numerischer Wert fuer die Alkoholvertraeglichkeit des Wesens.

P_HP
// Anzahl der Lebenspunkte des Wesens.

P_SP
// Anzahl der Magiepunkte des Wesens.

P_MAX_HP
// Maximale Anzahl der Lebenspunkte.

P_MAX_SP
// Maximale Anzahl der Magiepunkte.

P_XP
// Anzahl der Erfahrungspunkte.

P_TOTAL_AC
// Numerischer Wert der Abwehrstaerke des Wesens.

P_TOTAL_WC
// Numerischer Wert der Angriffsstaerke des Wesens.

P_MSGIN
// String mit der Meldung, die beim Verlassen eines Raumes mit M_GO
// an die uebrigen Anwesenden ausgegeben wird.

P_MSGOUT
// String mit der Meldung, die beim Betreten eines Raumes mit M_GO
// an die uebrigen Anwesenden ausgegeben wird. Ein u.U. vorhandenes
// '#' im String wird durch die Richtung ersetzt, ansonsten wird
// die Richtung einfach an MSGOUT angehaengt.

P_MMSGIN
// String mit der Meldung, die beim Verlassen eines Raumes mit M_TPORT
// an die uebrigen Anwesenden ausgegeben wird.

P_MMSGOUT
// String mit der Meldung, die beim Betreten eines Raumes mit M_TPORT
// an die uebrigen Anwesenden ausgegeben wird.

P_TITLE
// Titel des Spielers. Erscheint hinter dem Namen in Kurz/Langbeschreibung.

P_PRESAY
// Presay des Spielers. Erscheint vor dem Namen in Kurz/Langbeschreibung.
// Erscheint auch in name(), also in sag, ruf, teile mit usw.

P_ZAP_MSG
// Dreielementiges Array:
// 1.) Meldung, die der Magier beim Zappen bekommt.
// 2.) Meldung, die die Spieler im Raum beim Zappen bekommen.
// 3.) Meldung, die das Opfer beim Zappen bekommt.
// Mit @@wer@@, @@wessen@@, ... kann der Name des Opfers und mit
// @@ich@@ der Name des Magiers in die Meldung eingewebt werden.

P_TRANK_FINDEN
// Wenn die Property auf 1 steht kann immer ein Zaubertrank gefunden
// werden, auch wenn er nicht in der Liste des Spielers steht.

P_AWAY
// String der ausgegeben wird, wenn man weg ist und eine Mitteilung bekommt.

P_IGNORE
// Array der Spieler, deren Mitteilungen ignoriert werden.

P_WEAPON
// Momentan gezueckte Waffe.

P_COMBATCMDS
// Fuer den Kampf gebrauchbare Befehle spezieller Objekte
// (damit auch Monster sie automatisch richtig anwenden koennen)
// Mapping ([ Befehl : Mapping ([ Eigenschaft: Wert]) ])
// Eigenschaften:
// C_MIN, C_AVG, C_MAX: Minimaler/durschschnittlicher/maximaler Schaden
// C_DTYPES: Damagetypes
// C_HEAL: Eigene Heilung

P_ARMOURS
// Liste der getragenen Schutzbekleidungen.

P_HANDS
// 3-elem. Array
// 1. Elem.: String mit der Meldung, wenn ohne Waffen angegriffen wird.
// 2. Elem.: Weaponclass, wenn ohne Waffen angegriffen wird.
// 3. Elem.: Angriffs-typ, default ist DT_BLUDGEON

P_RESISTANCE
// Array mit Angriffsarten, gegen die das Lebewesen teilweise
// resistent ist.

P_VULNERABILITY
// Array mit Angriffsarten, gegen die das Lebewesen empfindlich
// ist.

P_MAX_HANDS
// Anzahl der Haende, die ein Wesen hat.

P_USED_HANDS
// Anzahl der Haende in Benutztung

P_ABILITIES
// Alist mit Sonderfaehigkeiten.

P_NPC
// Gesetzt bei Monstern.

P_WIMPY
// Numerischer Wert. Das Wesen flieht, wenn die Lebenspunkte
// unter diesen Wert sinken.

P_BRIEF
// Ist gesetzt, wenn der Spieler nur die Kurzbeschreibung sehen will.
// Im 'Ultrakurzmodus' ist P_BRIEF auf 2 gesetzt.

P_HEAL
// Numerischer Wert, der beim Verzehr dieses Objektes zu den
// Lebenspunkten hinzugezaehlt wird. (kann auch negativ sein)
// Der Wert sollte zwischen +4 und -4 liegen und bei leichten
// Monstern 0 sein.

P_ATTACK_BUSY
// Testet, ob ein Lebewesen (speziell ein Spieler) gerade einen Spell
// casten kann (abhaengig von P_LEVEL). 

P_DISABLE_ATTACK
// Das Lebewesen kann nicht angreifen.

P_DIE_MSG
// String mit der Meldung, die ausgegeben wird, wenn das Wesen stirbt.
// ist die Property nicht gesetzt, so nehme " faellt tot zu Boden.\n".

P_KILLS
// Anzahl der Spieler, die dieser Spieler schon getoetet hat.
// Unerlaubte Manipulation ist ein SCHWERES VERGEHEN gegen
// die Mudreglen.

P_MAILADDR
// EMailadresse des Spielers.

P_CALLED_FROM_IP
// Letzte IP-Adr, von der aus sich der Spieler eingeloggt hat.

P_CURRENTDIR
// Momentanes Verzeichnis in dem der Spieler ist. (nur fuer
// Magier von Belang)

P_AUTOLOAD
// Alist mit der Menge der Autoloadobjekte und den zugeh.
// Properties.

P_FROG
// Gesetzt, wenn der Spieler ein Frosch ist.

P_INVIS
// Gesetzt, wenn der Spieler unsichtbar ist.
// Wird nicht zum Lesen benutzt. Ist nur bei Spielern und Monstern
// sinnvoll. Unsichtbare Objekte sollten SetProp(P_SHORT,0) gesetzt haben.

P_GHOST
// Gesetzt, wenn der Spieler tot ist.

P_EXTRA_LOOK
// String, der einen zusaetzlichen Text in der long()-Beschreibung
// eines Spielers erzeugt.

P_GUILD
// Gilde, der der Spieler angehoert.
// Ist 0, wenn der Spieler Abenteurer ist, ansonsten enthaelt
// die Propertie den Namen der Gilde (kleingeschrieben).

P_LEVEL
// Spieler-Level (!= Magierlevel)

P_QUESTS
// Liste der geloesten Quests.

P_CAP_NAME
// Name des Spielers, der dekliniert und ausgegen wird.
// NOT YET IMPLEMENTED.

P_TTY
// Name der Terminalemulation, die der Spieler nutzt.
// NOT YET IMPLEMENTED.

P_SHOW_EXITS
// Gesetzt, wenn der Spieler die offensichtlichen Ausgaenge
// immer automatisch sehen will.

P_CAN_EMOTE
// Gesetzt, wenn der Spieler 'emoten' kann.
// ist veraltet, besser P_FLAGS abfragen.

P_EARMUFFS
// Shouts von Magiern mit Level < earmuffs werden abgeblockt
// (Nur fuer Magier)

P_WANTS_TO_LEARN
// Gesetzt, wenn der Magier die Filenamen sehen will.
// (Nur fuer Magier). Wird diese Property auf 0 gesetzt, gehen auch
// einige andere Dinge nicht mehr - verfolge zB. (und er ist 'toetbar')
// Eigentlich sollten dann auch die Magierbefehle wie "goto" usw
// unterbunden werden - das kommt vielleicht noch.

P_TESTPLAYER
// Gesetzt, wenn der Spieler nicht in der Bestenliste auftauchen soll.
// Kann auch einen String enthalten mit dem Namen des Magiers.

P_AGE
// Alter des Spielers in Heart-Beats (1 HB == 2 Sekunden)

P_BLIND
// TRUE, wenn der Spieler nichts sehen kann.

P_MARRIED
// Enthaelt einen String mit der uid des Partners
// (sofern vorhanden)

P_WC
// Numerischer Wert fuer die Staerke der Waffe.

P_DAM_TYPE
// String mit der Art der Verletzung.

P_WEAPON_TYPE
// Art der Waffe

P_WIELDED
// Enthaelt, wenn die Waffe gezueckt ist, das Objekt des Spielers/NPCs,
// der die Waffe gezueckt hat, sonst 0.

P_AC
// Numerischer Wert fuer die Abwehrstaerke der Ruestung.

P_ARMOUR_TYPE
// String fuer Art der Ruestung; welcher Koerperteil wird
// geschuetzt?

P_WORN
// Enthaelt, wenn die Ruestung getragen ist, das Objekt des Spielers/NPCs,
// der die Ruestung traegt, sonst 0.

P_AMOUNT
// Anzahl der Objekte, fuer die das Objekt steht.

P_VALUE_PER_UNIT
// Wert in Goldstuecken pro Untereinheit.

P_WEIGHT_PER_UNIT
// Gewicht in Gramm pro Untereinheit.

P_FUEL
// Numerischer Wert fuer die Zeitdauer, die die Lichtquelle noch
// leuchten kann.

P_LIGHTDESC
// String mit der Bezeichnung des Leuchtvorgangs, den die Licht-
// quelle ausfuehrt (leuchtend, brennend, gluehend ...)

P_DO_DESTRUCT
// Flag, ob sich die Lichtquelle am Ende der Leuchtzeit selbst
// zerstoert. (Oder sogar mit String fuer die Meldung, die bei
// der Zerstoerung angegeben wird?)

P_LIGHTED
// Flag, ob die Lichtquelle in Betrieb ist.

P_CHATS
// Alist mit Strings, die das Monster zufaellig ausgibt.

P_CHAT_CHANCE
// Wahrscheinlichkeit, mit der die Chats ausgegeben werden.

P_ACHATS
// Chats, die das Monster im Kampf ausgibt.

P_ACHAT_CHANCE
// Wahrscheinlichkeit fuer die Attack-Chat-Ausgabe.

P_BODY
// Numerischer Wert fuer die Abwehrstaerke des blanken Koerpers
// des Wesens.

P_HB
// Diese Property wird gesetzt, wenn das Monster immer einen
// heart_beat haben soll. (VORSICHT, nur wenn es WIRKLICH sein muss!)

P_AGGRESSIVE
// Gesetzt, wenn das Wesen von sich aus Angriffe startet.

P_NOCORPSE
// Gesetzt, wenn im Todesfall kein Leichnam erzeugt werden soll.

P_REJECT
// Ein Array aus 2 Elementen, das bestimmt, das der npc mit Dingen
// tuen soll, die ihm gegeben werden.
// Default, der npc behaelt die Dinge einfach.
// Wenn gesetzt:
// 1.Element: Art der Handlung. (aus <moving.h>)
//   REJECT_GIVE: Der NPC gibt das Objekt zurueck.
//   REJECT_DROP: Der NPC laesst das Objekt fallen.
//   REJECT_KEEP: Der NPC behaelt das Objekt doch.
// 2.Arrayelement: Meldung, mit der der NPC die Handlung kommentiert.

P_ENTERMSG
// Array mit zwei Meldungen, eine fuer den Raum, den der Spieler
// verlaesst, und eine fuer den Transporter, in den er geht.

P_LEAVEMSG
// Array mit zwei Meldungen, eine fuer den Transporter, den er verlaesst,
// und eine fuer den Raum in den er kommt.

P_LEAVEFAIL
// Meldung an ein Wesen, wenn es ausserhalb der Anlegezeiten den Transporter
// verlassen will. Ist die Prop. ein Array, so wird das erste Element als
// meldung an das Wesen, das zweite als Meldung an die Mitspieler im
// Transporter geschickt.

P_ENTERFAIL
// Meldung an ein Wesen, wenn den vollen Transporter betreten will.
// Ist die Prop. ein Array, so wird das erste Element als
// meldung an das Wesen, das zweite als Meldung an die Mitspieler im
// Raum geschickt.

P_ARRIVEMSG
// Meldung, wenn der Transporter anlegt.

P_DEPARTMSG
// Meldung, mit der ein Transporter ablegt.

P_ENTERCMDS
// Befehlsliste, die zum Betreten des Transporters fuehrt.

P_LEAVECMDS
// Befehlsliste, die zum Verlassen des Transporters fuehrt.

P_MAX_PASSENGERS
// Numerischer Wert fuer die maximale Anzahl von Wesen in dem Transporter.
// 0 bedeutet unbeschaenkte Spielerzahl.

P_ARTICLE
// Gibt an, ob in der Beschreibung ein Artikel ausgegeben werden soll
// oder nicht.

P_LAST_COMMAND_ENV
// Der Raum, in dem das letzte Kommando eingegeben wurde.

P_NETDEAD_INFO
// Hier kann ein Raum Informationen in einem Spieler zwischenspeichern, wenn
// dieser in den Netztotenraum gemoved wird.

P_FOLLOW_SILENT
// Wenn diese Property 1 ist, wird der MOVE vom verfolge Silent ausge-
// fuehrt.

P_START_HOME
// Raum, in dem der Spieler nach dem Einloggen landen soll

P_CARRIED_VALUE
// Entschaedigung, die der Spieler beim Einloggen erhaelt.

P_PROMPT
// Das Prompt (Nur fuer Magier).

P_CANECHO
// Zeigt an, ob der Seher "echo" benutzen kann oder nicht.
// ist veraltet, besser P_FLAGS abfragen.

P_POTIONROOMS
// Alist mit den Nummern der Raeume, in denen der Spieler noch Zauber-
// traenke finden kann.

P_QP
// Anzahl der Questpunkte, die ein Spieler hat.

P_ENEMY_DEATH_SEQUENCE
// Hiermit kann man die Todessequenz beeinflussen, die ein Spieler sieht.
// Steht hier ein Mapping, so sieht der Spieler die Standard-Sequenz,
// in der die durch die Keys indizierten Zeilen eingefuegt werden;
// steht hier ein Pointer (Array), so kann eine ganze Sequenz uebergeben
// werden, die der Spieler dann sieht (dazu sollte man vorher vielleicht
// /room/death/death_room.c konsultieren).

P_CLONER
// Enthaelt einen String mit dem Namen desjenigen, der das Objekt gecloned hat.

P_RACE_DESCRIPTION
// Beschreibung der Vor/Nachteile einer Rasse.

P_DOOR_INFOS
// Enthaelt ein Mapping mit Informationen ueber die Tueren im Raum.
// Sollte nie direkt manipuliert werden, sondern immer nur ueber die
// Funktionen des Doormasters (/obj/doormaster.c).
// Siehe dazu auch /sys/room/doors.h (frueher /sys/doorroom.h)

P_ATTRIBUTES_OFFSETS
// Mapping mit Offsets, die zu den Attributen addiert werden (koennen auch
// negativ sein) - zB Rassenboni.

P_DEADS
// Anzahl der Tode des Spielers seit Einfuehrung dieser Property (irgendwann
// im Dezember 94)

P_LAST_LOGIN
// Zeitpunkt des letzen Logins

P_LAST_LOGOUT
// Zeitpunkt des letzen Logouts

P_SECOND
// Spieler ist Zweitie.
// Kann auch einen String enthalten mit dem Namen des Erstspielers.

P_SCREENSIZE 
// Bildschirmgroesse in Zeilen (fuer More)

P_FLAGS
// Flags des Spielers

P_CAN_FLAGS
// Flags, ob Spieler echoen/emoten kann == P_FLAGS

P_NEEDED_QP
// APs, die man fuer den Seherstatus braucht

P_INTERMUD
// Obsolet?

P_BUFFER
// Enthaelt Kobold-Nachrichten

P_CLASS
// Im AL z.z. ohne Funktion

P_CONTENTS
// Obsolet?

P_KILLER
// Wird direkt beim Tod auf das toetende Objekt gesetzt

P_MURDER_MSG
// Welche Meldung soll auf dem Moerder-Kanal erscheinen?

P_KILL_NAME
// Name, der auf dem Todeskanal erscheint, wenn jemand von uns
// (z.B. auch ein Raum) getoetet wird

P_KILL_MSG
// Meldung auf dem Todeskanal, wenn jemand von uns getoetet wird

P_CORPSE
// Welchen Corpse hinterlassen wir?

P_WIMPY_DIRECTION
// Fluchtrichtung

P_POISON
// Wie stark wir vergiftet sind (0..P_MAX_POISON)

P_MAX_POISON
// Maximal erreichbarer Giftlevel

P_RACE_DESCRIPTION
// Rassenbeschreibung, die man bei der Wahl der Rasse abrufen kann

P_DEFAULT_INFO
// NPC-Info-System: Default-Antwort auf dumme Fragen

P_PURSUERS
// Enthaelt Verfolger - nicht von Hand manipulieren!

P_HP_HOOKS
// Welche Objekte sollen bei HP-Aenderungen benachrichtigt werden?

P_CURSED
// Verfluchte Waffen/Ruestungen kann man nicht ausziehen/wegstecken

P_SPELLS
// NPC-Spells

P_SPELLRATE
// NPC-Spellrate (in %)

P_INFORMME
// Informieren ueber Spieler, die ins Mud kommen/aus dem Mud gehen?

P_WAITFOR
// Die Erwarte-Liste

P_HAUS_ERLAUBT
// Hier darf gebaut werden

P_SHORT_CWD
// .readme bei cd ausgeben oder nicht

P_PARA
// Nummer der Parallelwelt in der ein Spieler ist.
// Wenn zu einem Raum room.c ein Raum room^1.c existiert, und der
// Spieler P_PARA auf 1 gesetzt hat, wird er statt in room.c in
// room^1.c gemoved.

P_SIZE
// Groesse des Spielers oder NPCs in cm.

P_WATER
//  Nachzulesen in /sys/fishing.h

P_FISH
//  Nachzulesen in /sys/fishing.h

P_LIQUID
//  Nachzulesen in /sys/fishing.h

P_LONG_EMPTY 
//  Nachzulesen in /sys/fishing.h

P_LONG_FULL
//  Nachzulesen in /sys/fishing.h

P_LOG_INFO
// Wenn diese Property gesetzt ist wird jede Frage, die ein
// Monster nicht beantworten kann, im Report-File des
// zustaendigen Magiers geloggt oder wahlweise in
// /log/loginfo/<dateiname> (wenn <dateiname> als Parameter
// angegeben wurde.

P_COMBATCMDS
// Befehle, die man mit Spezialwaffen ausfuehren kann und genauere
// Informationen hierzu.

P_DEAF
// Der Spieler ist taub.

P_KEEP_ON_SELL
// Verhindert, wenn in einem Objekt gesetzt, den Verkauf des Objektes
// in einem Laden. Kann vom Spieler mit dem Befehl 'behalte' gesetzt
// werden.

P_MATERIAL
// Material, aus dem ein Gegenstand besteht. Fuer normale Gegenstaende,
// Ruestungen und Waffen werden Defaultwerte gesetzt.

P_NOSELL
// Diese Property enthaelt eine Meldung, die ausgegeben wird, wenn
// jemand versucht, dieses Objekt zu verkaufen. Wird die Prop. auf einen
// nicht-String-Wert gesetzt, so wird eine Defaultmeldung ausgegeben.

P_NOAGGRESSIVE
// Wenn diese Property im Spieler gesetzt ist, wird er von NPC's, die
// P_AGGRESSIVE gesetzt haben, nicht angegriffen. Diese Property sollte
// nur im Rahmen eines Spells und nur kurzzeitig gesetzt sein.

P_EXIT_PREPOSITION
// Der Inhalt dieser Propery ist ein String, der bei 'non-standard' Ausgaengen
// (also solchen die nicht n,w,s,o,nw,no,sw,so,ob,u sind) vor den Ausgang davor-
// geschrieben wird. Wenn P_EXIT_PREPOSITION auf "nach" gesetzt ist erhalten
// die Spieler im Raum die Meldung 'Xyz geht nach rechts', wenn der Spieler Xyz
// den Raum durch den Ausgang 'rechts' verlaesst.

P_SMELLS
// Enthaelt ein Mapping mit Geruechen im Raum und deren Beschreibungen. 
// Sollte niemals direkt manipuliert werden, sondern immer per AddSmell
// und RemoveSmell

P_SOUNDS
// Enthaelt ein Mapping mit Geraeuschen im Raum und deren Beschreibungen. 
// Sollte niemals direkt manipuliert werden, sondern immer per AddSound
// und RemoveSound

P_MSG_FLAGS
// Der Inhalt dieser Property ist ein Mapping, in dem festgelegt wird, ob eine
// Ausgabe auf dem Todes- oder Moerderkanal normal, als 'emote' oder 'gemote'
// erfolgt. Der Key ist dabei entweder P_KILL_MSG oder P_MURDER_MSG, der Wert
// 0 (normale Ausgabe), 1 (Ausgabe per 'emote') oder 2 (Ausgabe per 'gemote').
// Bsp: SetProp( P_MSG_FLAGS, ([P_KILL_MSG:1, P_MURDER_MSG:2]) )
// Anmerkung: Auf dem Todeskanal ist 'gemote' zur Zeit nicht moeglich.

P_SPECIAL_SHOP
// Wird in Laeden (also Raeumen, die /std/laden inheriten) gesetzt, wenn
// nur bestimmte Objekte verkauft werden sollen. Enthaelt ein Mapping, das
// als Key die Property, die fuer zu verkaufende Objekte 'typisch' ist, enthaelt
// und als Value die Meldung, die ausgegeben wird, wenn der Laden andere Objekte
// ablehnt. 
// Also z.B. fuer einen Waffenladen ([P_WC:"Dies ist ein Waffenladen.\n"]).

P_NO_INVIS
// P_NO_INVIS sollte in allen Gegenstaenden gesetzt werden, die Spieler nicht
// per Spell unsichtbar machen duerfen (die Spells sollten das natuerlich
// auch abfragen :). Fuer NPCs ist P_NO_INVIS per Default 1 fuer alle
// anderen Gegenstaende 0

P_NOATTACK
// P_NOATTACK im NPC gesetzt verhindert das ein Spieler den NPC
// angreifen kann. Setzen im Spieler nicht moeglich!
// Auch wenn ichs fast vergessen haette :-)   Gundur
// P_NOATTACK kann einen String enthalten, der an den Spieler ausgegeben
// wird, wenn er versucht, den NPC anzugreifen. Defaultmaessig wird
// " springt geschickt aus Deiner Reichweite." ausgegeben.

P_ENVIRONMENT
// Mapping, das die Umgebung (z.B. Raum) eines Spielers beschreibt.
// Hier steht z.B. die Raumtemperatur:
// SetProp( P_ENVIRONMENT, ([ ENV_TEMPERATURE : 20 ]) ) setzt die Raum-
// temperatur auf 20 Grad.

P_TEMPERATURE_RANGE
// Temperaturbereich, in dem sich ein Spieler 'wohl fuehlt'.
// Fuer Menschen z.B. ([T_RANGE_MIN:5,T_RANGE_MAX:25]), d.h. 5-25 Grad
// Wenn Raumtemperatur+Temperaturschutz+Temperaturoffset nicht
// innerhalb dieses Bereichs liegen, sollen sich Auswirkungen auf
// den Spieler ergeben.

P_TEMPERATURE_PROTECTION
// Numerischer Wert, der den Temperaturschutz eines Ruestungsteils
// angibt. Positive Werte ergeben einen Schutz gegen Kaelte, negative
// Schutz gegen Hitze. Fuer die einzelnen Ruestungsarten werden Default-
// werte gesetzt.

P_TOTAL_TEMPERATURE_PROTECTION
// Gesamt-Temperaturschutz der Ruestung. Wird intern berechnet.

P_TEMPERATURE_OFFSET
// Offset auf den Temperaturschutz eines Spielers. Kann z.B. durch
// ein waermendes Getraenk o.ae. gesetzt werden.

P_FOOD_INFO
// Enthaelt ein Mapping mit Eigenschaften das Nahrungsobjektes.
// Moegliche Keys sind F_HEAL = Heilung, F_SOAK = Saettigung, F_ALCOHOL =
// Alkoholgehalt und F_POISON = Giftlevel.

P_NPC_SPELL_VECTOR
// Nur fuer internen Gebrauch!

P_NPC_HB_OFF_COUNT
// Nur fuer internen Grbrauch!

P_GUARD
// Gesetzt in NPCs, die nicht oder nicht ohne weiteres durch Spells
// aus dem Weg geraeumt werden sollen (durch Toeten schon).
// Siehe /sys/npc/guard.h

P_SHORTINV
// Zeigt, wenn im Spieler gesetzt, alle Inventories im 'Kurzmodus' an,
// d.h. mehrfache Objekte werden nur einmal, dafuer aber mit der Anzahl
// in Klammern hinter dem Objektnamen, angezeigt.

P_ATTACK_ME
// z.z. unbenutzt

P_CORPSE_FLAGS
// Legt diverse Einstellungen fuer die Leiche eines Livings fest.
// Insbesondere sind dies:
// COR_NOSETWEIGHT: Gewicht der Leiche (P_CORPSE) NICHT auf Gewicht
//   des Livings setzen
// COR_NOINVTRANSFER: Inventory des Livings wird NICHT in die Leiche
//   (sondern in den Raum) gelegt
// COR_MSGIN: Die "Leiche" erzeugt beim Clonen ein MSGIN im Raum
//   (i.e. "Eine Leiche kommt an."). Ist bei std/corpse weniger sinnvoll:)
// COR_KILLENEMY: Die "Leiche" (zB. ein Nachfolge-NPC) attackiert
//   den Killer des Livings sofort.

P_CORPSE_PROPS
// Mapping, mit dem diverse Properties der Leiche bereits im Living
// festgelegt werden koennen. Das Mapping hat die Form
// ([ PROPERTY: WERT (, PROPERTY: WERT (, ...)) ])
// z.B. ([ P_NAME: "Schokobon", P_SHORT: "Ein leckeres Schokobon" ])

P_GIVEN_OBJECT
// Das tatsaechlich uebergebene Objekt. Wichtig zum Beispiel bei Geld,
// wo das geben von 5 Muenzen, wenn man 8 hat, das Clonen eines neuen
// obj/money mit Amount 5 zur Folge hat (das dann ein anderes Objekt
// ist als die 3 Muenzen, die einem bleiben).

P_REFERENCE_OBJECT
// Das zuletzt vom Spieler untersuchte Objekt. Sinnvoll fuer Details
// an Dingen, da zuerst nach Details an P_REFERENCE_OBJECT gesucht wird.

P_SMELL
// Der Geruch eines Objekts wird hier beschrieben, entweder als String,
// oder als Mapping, dann wird die Rasse des an dem Objekt riechenden
// Spielers als Index genommen.

P_SOUND
// Das Geraeusch eines Objekts wird hier beschrieben, entweder als String,
// oder als Mapping, dann wird die Rasse des an dem Objekt lauschenden
// Spielers als Index genommen.

P_COLUMN_MODE
// Legt fuer einen Spieler fest, wie dieser die Anzeige seines Inventories
// bzw. von Objekten in Raeumen haben will. 0 bedeutet keine spaltenweise
// Anzeige, 1: Spalten, 2: automatisch, d.h. ab mehr als 6 Objekten wird
// in Spalten angezeigt.

P_MNPC
// Ist bei Moving NPCs 1 gesetzt, sonst 0.

P_MNPC_AREA
// Legt fest, in welchem Gebiet sich ein MNPC aufhalten darf. Ein String
// wird als Gebiet interpretiert, dh. der MNPC darf in alle Raeume, die
// mit dem String uebereinstimmen oder laenger sind (zB. "room/wegoben"
// ist im Gebiet "room/weg" enthalten, nicht aber umgekehrt!). Es kann
// auch ein String-Array angegeben werden, das dann als Menge von
// erlaubten Gebieten interpretiert wird.

P_MNPC_CMDS
// Dieses Array enthaelt eine Menge von Befehlen, die der MNPC Element
// fuer Element ausfuehrt. Nach dem letzten Element faengt der MNPC wieder
// mit Abarbeitung des ersten an. Hierbei gilt: Ist ein Element ein String,
// so wird es per command() ausgefuehrt (z.B. "norden" oder "emote grinst."),
// ist es eine Zahl, so wird entsprechend viele Sekunden lang gewartet bis
// zum naechsten Befehl.
// Damit der MNPC die Befehle ausfuehrt, muss zudem MOV_CMDS in
// P_MNPC_FLAGS gesetzt sein.

P_MNPC_FLAGS
// Legt das Verhalten eines MNPCs durch diverse Flags fest:
// MOV_BACKWARDS: 1: Der MNPC darf auch in den Raum zurueck, aus dem er
//                   gekommen ist
//                0: Der MNPC geht nur dann in den Raum zurueck, aus dem
//                   er gekommen ist, wenn er in einer Sackgasse landet
// MOV_INDOORS:  Der MNPC darf in geschlossene Raeume
// MOV_OUTDOORS: Der MNPC darf ins Freie
// MOV_SPECIAL:  Der MNPC darf special exits verwenden
// MOV_MAYLOAD:  Der MNPC darf Raeume bei Bedarf laden. Dieses Flag
//               sollte nach Moeglichkeit sparsam eingesetzt werden!
// MOV_MOVES: aktiviert den MNPC, muss also gesetzt sein wenn er gehen soll
// MOV_CMDS: zeigt an, dass der MNPC statt wandern die in P_MNPC_CMDS
//           festgelegten Befehle ausfuehren soll. Ist sinnvoll, wenn man
//           einen MNPC eine bestimmte Route gehen lassen will, in dem Fall
//           sollte man aber achtgeben, dass er nicht zufaellig vom Weg
//           abkommt (zB. per P_WIMPY !) und dann vollends verwirrt ist.

P_MNPC_WAIT
// Array von drei Zahlen. Die erste Zahl legt fest, wielange ein MNPC
// warten soll, ehe er den ERSTEN Schritt macht, die zweite legt fest,
// wielange er mindestens warten soll, ehe er jeden weiteren Schritt
// macht, und die dritte wird bei jedem weiteren Schritt per random(zahl)
// hinzuaddiert, um eine gewisse Zufaelligkeit zu ermoeglichen.

P_MNPC_DEFAULTROOM
// Legt den Default-Room eines MNPCs fest, in den dieser teleportiert
// wird, wenn er sich hoffnungslos verirrt und keinen zulaessigen Weg
// mehr heraus findet (oder gar wenn er kein Environment hat).

