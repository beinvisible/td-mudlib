NAME
    P_SENSITIVE                   "sensitive"                    
   
  

DEFINIERT IN
    /sys/thing/moving.h  
    
   
  

BESCHREIBUNG
    Mit dieser Property kann man Objekte ueber bestimmte Vorkommnisse 
    benachrichtigen lassen oder ihnen eine Eigenschaft zuordnen. 
    Die Struktur ist: 
   
    ({<sensprops1>,<sensprops2>,...}) 
    wobei sensprops folgende Struktur hat: 
    ({list_key, key, treshold, <options> ...}) 
    mit: 
    list_key = SENSITIVE_INVENTORY: passive Eigenschaft (Empfindlichkeit) 
               SENSITIVE_ATTACK: Eine passive Eigenschaft (allg. 
                                 Empfindlichkeit gegen aeussere Einfluesse) 
               SENSITIVE_INVENTORY_TRIGGER: aktive Eigenschaft 
                                            (Ausstrahlung) 
               (definiert in /sys/sensitive.h) 
    key      = eine Schadensart (DT_FIRE oder DT_WATER oder ...) 
    treshold = der Schadenswert, ab dem das Objekt benachrichtigt werden 
               soll 
   
    Wenn die Parameter erfuellt sind, wird im triggernden Objekt: 
    trigger_sensitive_inv(object whodid, string key, int tresholdval, 
                          mixed options, mixed sens_options); 
    oder 
    trigger_sensitive_attack(object enemy, string key, int damage, 
                             mixed spell, mixed options); 
    aufgerufen. 
    Diese Funktion muss selbst ueberschrieben oder geschrieben (attack) 
    werden. 
   
  

BEMERKUNGEN
    Ist P_SENSITIVE nicht per default gesetzt (in der create()), sondern 
    wird situationsabhaengig gesetzt, muss man die Benachrichtigung des 
    Environment selbst uebernehmen. 
    Siehe RemoveSensitiveObject, InsertSensitiveObject. 
   
  

BEISPIEL
    Ein Eiszapfen, der bei Feuerangriffen oder bei heissen Gegenstaenden im 
--mehr--(Weiter mit ENTER)(61%)     gemeinsamen Environment zerschmelzen soll: 
   
    ... 
    SetProp(P_SENSITIVE,({({SENSITIVE_ATTACK,DT_FIRE,100}), 
                          ({SENSITIVE_INVENTORY,DT_FIRE,100})})); 
    ... 
   
    varargs void remove(int silent) { 
     if(!silent) { 
       object ob; 
       ob=this_object(); 
       while(environment(ob)) ob=environment(ob); 
       tell_room(ob,Name()+" zerschmilzt.\n"); 
     } 
     ::remove(silent); 
    } 
   
    varargs void trigger_sensitive_attack() { 
     remove(); 
    } 
--mehr--(Weiter mit ENTER)(81%)    
    varargs void trigger_sensitive_inv() { 
     call_out("remove",0);        // verzoegert, damit der move() 
                               // erst beendet wird 
    } 
   
    Wenn eine Fackel mit 
    SetProp(P_SENSITIVE,({({SENSITIVE_INVENTORY_TRIGGER,DT_FIRE,250})})); 
    in die gleiche Umgebung wie dieser Zapfen bewegt wird, loest diese 
    im Zapfen trigger_sensitive_inv() aus. 
   
  

SIEHE AUCH
  InsertSensitiveObject, RemoveSensitiveObject, insert_sensitive_inv_trigger, 
  insert_sensitive_inv, P_SENSITIVE_ATTACK, P_SENSITIVE_INVENTORY, 
  P_SENSITIVE_INVENTORY_TRIGGER, CheckSensitiveAttack 
  
