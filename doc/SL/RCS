
Was ist RCS
-----------

RCS steht fuer 'Revision Control System' und dient dazu, verschiedene
Versionen einer Datei zu verwalten, d.h. die Versionsnummer zu vergeben,
ein Log im File anzulegen, den (Schreib-)Zugriff verschiedener Programm-
autoren zu koordinieren usw. Man kann z.B. aeltere Versionen der Datei
'wiederbeleben'. Zu einer RCS-verwalteten Datei 'test.c' existiert (meist
in einem Verzeichnis 'RCS') eine Datei 'test.c,v', in der ausser diversen
Flags und Verwaltunginformationen die aktuelle Version der Datei 'test.c'
komplett gespeichert ist; zusaetzlich sind jedoch die Differenzen
('diffs') zu aelteren Versionen der Datei gespeichert, sodass man diese
jederzeit wieder herstellen kann.

Wie benutzt man es
------------------

  Kurzfassung
  -----------

  1. co -l datei.c                // Datei zur Bearbeitung sperren ('lock')
                                  // (entfaellt bei neu angelegten Dateien)

  2. vim datei.c                  // oder sonstwie editieren :)

  3. ci -u -wWoody datei.c        // neue Version 'registrieren' (und im-
                                  // plizit unlocked auschecken), statt
                                  // 'Woody' natuerlich eigenen Namen...

Langfassung :)
--------------

Im Grunde relativ einfach: Man muss zuallererst mal eine Datei auf RCS
vorbereiten, indem man gewisse 'Makros' ($Date$ usw.) in den Kommentar-
teil der Datei einfuegt. Dann erfolgt das allererste 'checkin', sprich
das Anlegen der RCS-Datei (RCS/test.c,v); dies geschieht mit dem Programm
'ci', welches dabei auch eine kurze Beschreibung der Datei erfragt.

Will man irgendwann mal die Datei aendern, so sollte man die neueste
Version aus der RCS-Datei extrahieren ('checkout') und zum Bearbeiten
sperren ('locken'), damit niemand anderer waehrenddessen dran herum-
pfuscht (dies geschieht mit dem Programm 'co'). Nach getaner Arbeit
wird die nun veraenderte Datei wieder neu eingecheckt (mit ci), wobei
ein Text fuers Log erfragt wird.

Ein einfaches Beispiel: In einem Verzeichnis wird ein leeres Unterver-
zeichnis 'RCS' angelegt und eine Datei 'test.c' mit folgendem Inhalt:

---------------------------------
// test.c - My humble source
// $Date$
/* $Revision$
 * $Log$
 */
 
#define BLA "bla"
---------------------------------

Nach dem Aufruf: ci -u -wWoody test.c
('ci' erfragt hierbei eine kurze Beschreibung der Datei)
sieht die Datei so aus:

---------------------------------
// test.c - My humble source
// $Date: 1996/03/18 01:30:56 $
/* $Revision: 1.1 $
 * $Log: test.c $
 * Revision 1.1  1996/03/18  01:30:56  Woody
 * Initial revision
 *
 */
 
#define BLA "bla"
---------------------------------

Haetten wir -u nicht angegeben, waere die Datei nur eingecheckt worden
und nicht mehr vorhanden, sondern nur noch im RCS-File. -u bedeutet
implizites checkout OHNE locking (unlocked), also Extrahieren der
(neuesten Version der) Datei test.c aus dem RCS-File.

Nun aendern wir ein bisschen was... dazu muessen wir die Datei zur
Bearbeitung locken:

co -l test.c

Kaeme hier die Meldung:
"writable test.c exists; remove it? [ny](n):"
so hat vermutlich schon ein anderer Magier die Datei zur Bearbeitung
gesperrt, in diesem Falle bitte mit diesem abklaeren. Aus diesem
Grunde sollte man Dateien auch wirklich nur zum Bearbeiten sperren
und moeglichst bald wieder (unlocked) einchecken.

Und nach: ci -u -wDebugger test.c
(und der Eingabe 'BLA zu P_BLA gemacht' im ci-Prompt)
sieht die Datei so:

---------------------------------
// test.c - My humble source
// $Date: 1996/03/18 01:32:26 $
/* $Revision: 1.2 $
 * $Log: test.c $
 * Revision 1.2  1996/03/18  01:32:26  Debugger
 * BLA zu P_BLA gemacht
 *
 * Revision 1.1  1996/03/18  01:30:56  Woody
 * Initial revision
 *
 */
 
#define P_BLA "bla"
---------------------------------

Wenn ich bei einer 'alten' Datei, die zwar ein eventuell langes Log hat,
aber zu der ich keine RCS-Informationen habe, die Versionszaehlung fort-
fuehren will, muss ich beim Parameter '-u' von 'ci' die neue Versions-
nummer anfuegen (aber nur beim 1. Mal, danach gehts automatisch weiter).
Wenn die aktuelle Version z.B. 2.58 ist und ich bei 2.59 weitermachen will,
rufe ich 'ci -u2.59 -wWoody datei.c' auf.

Wenn mehrere Leute auf ein File zugreifen wollen (per ftp), sollte man sich
absprechen, vor dem Bearbeiten durch checkout mit locking die Datei zur
Bearbeitung sperren (bzw. so pruefen, ob sie evtl. schon gesperrt ist),
und dann nach dem Hochladen mit 'ci -wUser -u datei.c' die neue Version
beim RCS 'anmelden'. Generell ist es wohl eine gute Idee, Aenderungen
hintereinander vorzunehmen, auch wenn RCS prinzipiell Version Branching
mit spaeterem Version Joining unterstuetzt.

Eine weiterfuehrende Kurzanleitung zum RCS kann man auf UNIX-Systemen mit
'man rcsintro' abfragen. Auch die Hilfeseiten zu 'ci', 'co' und 'rcs'
koennen hilfreich sein. Die hier verwendeten Syntaxen treffen auf
Linux und Walter F. Tichy's rcs-Paket zu.


Woody
(mit Vorarbeit von Mupfel)

---

Ergaenzend moechte ich den im Tamedhon defaultmaessig verwendeten
RCS-Header anhand eines Beispiels hier festhalten:

---------------------------------
// Tamedhon MUDlib
//
// std/living/skills.c -- Skill/Spell Handling for Livings
//
// $Date$
/* $Revision$
 * $Log$
 */
---------------------------------


Woody

