
AddUniqueItem()

FUNKTION:
     varargs object AddUniqueItem(string *filenames, int refresh, int rand, mixed props)

DEFINIERT IN:
     /std/room/items.c

ARGUMENTE:
     filenames
          Ein Array mit zwei Eintraegen (Strings):
              1: Das Unique Item, das geclont werden soll
              2: Alternatives Item, falls das UI schon existiert

     refresh
          Wann soll das Objekt erneuert werden?

     rand (optional)
          Mit welcher Zufaelligkeit soll versucht werden das UI zu clonen?
	  Wenn rand <2 ist wird jedes mal versucht ein UI zu erzeugen!
	  (ansonsten per random(rand))

     props (optional)
          Weitere Eigenschaften fuer das Objekt.
	  Ist props==1 wird die Blueprint des Files verwendet

BESCHREIBUNG:
     Ein Objekt wird erzeugt und in den Raum bewegt.
     Ist das Unique Item (filenames[1]) schon erzeugt und noch im Spiel
     (also nicht zerstoert) wird der Alternativgegenstand geclont.     

     Uebergibt man fuer props ein Mapping mit dem Aufbau

     ([ prop_name : prop_wert, ... ]),

     so werden diese Properties im erzeugten Objekt gesetzt.

     Der Parameter refresh gibt an, was waehrend des Resets des Raumes
     geschehen soll. In <rooms.h> sind dazu folgende Moeglichkeiten
     definiert:

     REFRESH_NONE
          Das Objekt wird niemals erneuert; falls es zerstoert wurde, wird
          es erst dann wieder erzeugt, wenn der Raum erneut geladen wird.

     REFRESH_DESTRUCT
          Das Objekt wird nur dann erneuert, wenn es in der Zwischenzeit
          zerstoert wurde (bei NPCs ist das zum Beispiel der Fall, wenn sie
          getoetet wurden).

     REFRESH_REMOVE
          Das Objekt wird erneuert, wenn es sich nicht mehr im Raum
          befindet. Das kein sein, weil es zerstoert wurde, aber auch, weil
          es jemand mitgenommen hat (bei Gegenstaenden) oder es fortgegangen
          ist (bei NPCs, die herumlaufen).

     REFRESH_ALWAYS
          Das Objekt wird immer erneuert. Von dieser Refreshmethode sollte
          man allerdings Abstand nehmen, da sich sonst mit der Zeit
          gewaltige Mengen von Objekten ansammeln koennen!

     Benutzt man Blueprints (props=1 mit REFRESH_REMOVE oder REFRESH_ALWAYS,
     so kann es zu ungewollten Ueberraschungen kommen, da die Blueprint dann
     unabhaengig von ihrem momentanen Aufenthaltsort wieder in den Raum
     bewegt wird, von dem sie erzeugt wurde!

RUECKGABEWERT:
     Das erzeugte Objekt.

BEMERKUNGEN:
     Wenn man Blueprints benutzt, sollte man daran denken, dass sich von
     dieser dann keine Clones mehr erstellen lassen!
     Auch sollte man bedenken, dass WENN man Blueprints benutzt MUSS sowohl
     vom UI alsauch vom alternativen Gegenstand die Blueprint benutzt werden!

BEISPIELE:

     Siehe AddItem() und das NPC AddUniqueItem()

SIEHE AUCH:
     AddItem(), RemoveItem(), /std/room/items.c

