STANDARD KLASSE:
	"/std/armour"
 
BENUTZUNG:
        inherit "/std/armour";
 
        #include <properties.h>
        #include <combat.h>

PROPERTIES:
	P_AC
		Ruestungsklasse der Ruestung, bestimmt den Schutz, den
		eine Ruestung bietet.
	P_ARMOUR_TYPE 
		Ruestungstyp der Ruestung. 
        Alle Properties aus /std/thing.

MAKROS:
	AT_ARMOUR, AT_HELMET, AT_AMULET, AT_RING, AT_GLOVE,
	AT_CLOAK, AT_BOOT, AT_SHIELD, AT_TROUSERS, AT_MISC
	  Gueltige Ruestungstypen (definiert in "/sys/combat.h").
 
ERLAEUTERUNG:
        Basisklasse fuer alle Ruestungen im Spiel. Sie ist von "/std/thing"
        abgeleitet und enthaelt alle zusaetzliche Funktionalitaet
        fuer den Kampf.
 
   Funktionen:
	SetDefendFunc(object ob)
		Setzt das Objekt, in dem die Funktion DefendFunc() definiert
		wird. DefendFunc() bekommt den damage-type und den Angreifer
		als Parameter uebergeben und gibt selber einen Integer-Wert 
		zurueck, der zum aktuellen Schutz addiert wird.
	QueryDefendFunc()
		Liefert das Objekt in dem DefendFunc() definiert ist.
	SetWearFunc(object ob)
		Setzt das Objekt, in dem die Funktion WearFunc() definiert
		wird. WearFunc() wird beim Versuch die Ruestung anzuziehen
		aufgerufen, gibt sie 0 zurueck so scheitert der Versuch.
	QueryWearFunc()
		Liefert das Objekt in dem WearFunc() definiert ist.
	SetRemoveFunc(object ob)
		Setzt das Objekt, in dem die Funktion RemoveFunc() definiert
		ist. Die Funktion wird beim Versuch die Ruestung auszuziehen
		aufgerufen, gibt sie 0 zurueck, so scheitert der Versuch.
	QueryRemoveFunc()
		Liefert das Objekt, in dem RemoveFunc() definiert ist.
	QueryWorn()
		Liefert den Spieler (oder das Monster), der die Ruestung
		traegt, oder 0, wenn sie nicht getragen wird.

	Vor der Programmierung von Ruestungen sollte /doc/MG/waffen_werte
        gelesen werden. Die Regeln darin sind verbindlich und sollten nur
        in Ausnahmefaellen und mit Absprache mit dem Erzmagier fuer 
        Waffen/Ruestungen/Monster ueberschritten werden.
