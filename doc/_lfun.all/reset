reset()

FUNKTION:
     void reset();

DEFINIERT IN:
     allen Standardobjekten

ARGUMENTE:
     keine

BESCHREIBUNG:
     reset() wird vom GameDriver in regelmaessigen Abstaenden aufgerufen, um
     dem Objekt die Gelegenheit zu geben, sich wieder in einen definierten
     Zustand zu versetzen.

     reset() wird im Schnitt alle 45 Minuten (+/-15 Minuten) aufgerufen;
     allerdings nur dann, wenn das Objekt in der Zwischenzeit bewegt wurde
     oder eine Funktion (ausser reset()) in ihm aufgerufen wurde.

RUECKGABEWERT:
     keiner

BEMERKUNGEN:
     Man kann reset() nutzen, um Ereignisse auszuloesen, die nur auf etwa
     stuendlicher Basis stattfinden sollen. Da reset() in allen Objekten
     aufgerufen wird, ist diese Methode billiger als ein entsprechend langer
     call_out(). Man hat allerdings keine grosse Genauigkeit, und man sollte
     daran denken, auch noch eine andere Funktion in sich selbst aufzurufen,
     damit auch weiterhin regelmaessig reset() aufgerufen wird.

     Was man nicht machen sollte, um die Zeit zwischen zwei reset()s zu
     verkuerzen, ist folgendes:

     reset()
     {
       // die ererbten Klassen resetten
       ::reset();

       // SOWAS NIEMALS TUN:
       call_out("reset", 10*60); /* in 10 Minuten der naechste reset() */
     }

     Was ist so schlimm daran? Nun, diese vom call_out() aufgerufenen
     reset()s bekommt der GameDriver nicht mit. Er ruft nach der ueblichen
     Zeit selbst reset() auf, was zu einem zweiten call_out() fuehrt, und so
     weiter. Man hat also eine klassische call_out()-Vermehrung.

BEISPIELE:
     Ein NPC, der bei jedem reset() schaut, ob um ihn herum bessere
     Ausruestung liegt als die, die er selbst gerade traegt (nur der Rumpf):

     inherit "/std/npc";

     create() { /* bla bla bla */ }

     reset()
     {
       object *inv;

       // NPC-spezifische Aufraeumarbeiten...
       ::reset();

       // Ausruestung pruefen.
       // Die clonep()-Abfrage stellt sicher, dass die Blueprint das nicht
       // auch versucht (da sie kein environment() hat, kann sie dort auch
       // keine Ruestungen finden...)
       if (clonep(this_object())) {
         inv = all_inventory(environment(this_object()));
         /* Auswahl... */
       }
     }

SIEHE AUCH:
     clean_up()

