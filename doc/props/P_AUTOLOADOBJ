NAME:
    P_AUTOLOADOBJ                 "autoloadobj"

DEFINIERT IN:
    /sys/player/base.h

BESCHREIBUNG:
    Mit dieser Property wird angegeben, ob ein Objekt ueber das
    Ausloggen eines Spielers (reboot/ende) behalten werden soll.

    Als Inhalt der Property koennen die permanenten Eigenschaften des
    Objektes angegeben werden, die der Spieler ueber das Ausloggen
    hinweg beibehaelt. Beim Einloggen werden sie automatisch neu gesetzt.

    Autoloadobjekte werden beim Ausloggen nicht fallengelassen!

BEMERKUNGEN:
    Der Inhalt der Property muss selbst verwaltet werden.
    Der einfachste Fall ist, dass man ein Objekt einfach mit seinen
    Standardeigenschaften rebootsicher machen moechte. Der Spieler erhaelt
    beim Einloggen nach Reboot oder Ende ein neues Standardobjekt.
    In dem Fall muessen keine Werte gespeichert werden.
    Es genuegt im create() ein SetProp(P_AUTOLOADOBJ, 1);

    Moechte man jedoch verschiedene Werte (Properties, Variablen oder
    aehnliches) speichern, so ist ein wenig mehr Aufwand erforderlich.
    In diesem Fall koennen die Methoden zum Abfragen und Setzen der Property
    mixed _query_autoloadobj() und _set_autoloadobj(mixed data)
    verwendet werden.

    Beim Speichern des Spielers (Kommando 'speichern' oder 'ende' oder in
    gewissen Zeitabstaenden bei aktiven und netztoten Spielern) wird in
    allen Objekten im Inventar des Spielers P_AUTOLOADOBJ abgefragt.
    Falls der Rueckgabewert ungleich 0 ist, wird dieser Wert mit
    dem Objekt gespeichert. Im einfachsten Fall wird also nur der Wert 1
    gespeichert. Falls zusaetzliche Eigenschaften gespeichert werden sollen,
    muessen diese von der Funktion _query_autoloadobj() returnt werden.

    Umgekehrt wird der gespeicherte Wert beim Laden ins P_AUTOLOADOBJ
    geschrieben, landet also dann als Argument in der Funktion
    _set_autoloadobj(), in der man dann den gespeicherten Zustand der
    Properties, Variablen, etc. wiederherstellen kann.

BEISPIELE:
    Variante 1: Nur der Besitz des Objektes selbst soll gespeichert werden.

    void create() {
        ...
        SetProp(P_AUTOLOADOBJ, 1);
        ...


    Variante 2: Es sollen Werte gespeichert werden (Properties, Zustaende,
                globale Variablen).

    Wir haben ein Objekt, in dem ein String und ein Integer gesetzt werden
    und wir moechten diese Werte rebootsicher haben. Zusaetzlich wollen wir
    auch die Property P_WEIGHT rebootsicher haben.

    ...
    //globale Variablen
    string desc;
    int anzahl;
    ...

    Wir brauchen kein SetProp(P_AUTOLOADOBJ, 1); im create()!
    Denn wir wollen ja nicht 1 speichern sondern individuelle Werte.

    Diese Werte werden vorher irgendwo im Objekt gesetzt:

    ...
    void irgendeineFunktion() {
        desc = "Dies ist eine individuelle Beschreibung.\n";
        anzahl++;
        write("Die Beschreibung wurde schon "+anzahl+" mal geaendert.\n");
    ...

    Jetzt sorgen wir dafuer, dass bei der Abfrage von P_AUTOLOADOBJ unsere
    Werte von der Query-Methode zurueckgegeben werden. Diese werden dann
    mit dem Spieler im Object-File gespeichert:

    // Wird beim Speichern des Spielers aufgerufen.
    // Wir returnen alle Werte in einem Array.
    // Waere es nur ein Wert, reichte es, diesen einen zu returnen.
    mixed _query_autoloadobj() {
        int weight;
        weight = QueryProp(P_WEIGHT);
        return ({ desc, anzahl, weight });
    }
    ...

    Die Struktur dieser uebergebenen Daten sollte man uebrigens spaeter
    nicht veraendern, denn sie werden in Spielern gespeichert bis diese
    irgendwann einmal wieder einloggen, was sehr lange dauern kann.
    Falls man doch erweitern muss: abwaertskompatibel bleiben, damit es
    beim Einloggen keine Probleme gibt!

    Jetzt sorgen wir dafuer, dass beim Einloggen des Spielers in das neu
    erstellte Objekt unsere gespeicherten Werte geschrieben werden:

    // Wird beim Laden des Spielers aufgerufen.
    void _set_autoloadobj(mixed data) {
        // sicherheitshalber pruefen wir, ob wir korrekte Werte bekommen
        if (pointerp(data) && sizeof(data)>2 &&
                              stringp(data[0]) &&
                              intp(data[1]) &&
                              intp(data[2]) )
        {
            desc = data[0];
            anzahl = data[1];
            SetProp(P_WEIGHT, data[2]);
        }
    }


SIEHE AUCH:
     P_AUTOLOAD, properties
