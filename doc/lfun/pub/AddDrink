FUNKTION:
     void AddDrink(string name, mixed ids, int preis, mixed heilung,
                   int alk, int staerke, mixed extra);

DEFINIERT IN:
     /std/pub.c

ARGUMENTE:
     name
          Der Name des Getraenks.
     ids
          String oder Array von Strings, mit denen sich das Getraenk
          ansprechen laesst (beim Bestellen).
     preis
          Was solls denn kosten?
     heilung
          Heilwert des Getraenks. int oder Array aus 3 Ints
     alc
          Alkoholgehalt des Getraenks.
     staerke
          Saettigungsgrad des Getraenks.
     extra
          Array von zwei Strings fuer Meldung beim Trinken
          ODER Closure/String mit Funktionsname: Bedeutung s.u.

BESCHREIBUNG:
     Es wird ein Getraenk namens <name> zum Preis von <preis> Tametalern in
     die Speisekarte eingefuegt.

     Bestellt ein Spieler das Getraenk, kann es finanzieren und auch noch
     trinken, so wird er um <heilung> Lebens- und Magiepunkte geheilt. Seine
     Saettigung erhoeht sich dabei um <staerke> Punkte, sein Alkoholpegel um
     <alc> Punkte.

     Ist <heilung> ein Array, so kann man die Art der Heilung differenzierter
     festlegen. heilung[0] ist die Anzahl der Lebenspunkte, heilung[1] die
     Anzahl der Magiepunkte, und heilung[2] ein zusaetzlicher Randomfaktor,
     der gleichermassen auf LP und MP (aber nur falls ungleich 0) auf-
     geschlagen wird. Fehlende Eintraege werden durch 0 ergaenzt.

     Abhaengig von <extra> wird dann eine der folgenden Aktionen ausgefuehrt:
     <extra> ist eine Closure oder ein Funktionsname:
          Die Funktion wird aufgerufen. Als Parameter bekommt sie den
          Spender und den Empfaenger des Getraenks.

          In der Funktion kann man irgendwelche Sonderfunktionen ausfuehren.
          Zum Beispiel koennte man nach dem Genuss eines besonders starken
          Gebraeus aus der Kneipe taumeln...

     <extra> ist ein Array von zwei Strings:
          Der erste dieser Strings wird an den Empfaenger des Getraenks
          ausgegeben, der zweite der Strings an alle anderen in der Kneipe.

          Mit "&&" kann dabei der Name des Empfaengers in die Strings
          eingebaut werden, mit "&!" das Personalpronomen des Empfaengers im
          Nominativ.

          Zusaetzlich werden "&1", "&2", "&3" und "&4" durch das Personal-
          pronomen des Empfaengers im Nominativ, Genitiv, Dativ und Akkusativ
          ersetzt, ausserdem "&=" durch das Possessivpronomen des Empfaengers
          im Singular ('sein', 'ihr') ersetzt und "&#" im Plural ('seine',
          'ihre').

RUECKGABEWERT:
     keiner

BEMERKUNGEN:
     Man sollte darauf achten, das man keine guten Heiltraenke zu
     Schleuderpreisen verkauft. Wichtiger ist allerdings, dass das
     Verhaeltnis von Heilung zur Saettigung stimmt:
             heilung < 3 * (staerke+alc)
     oder es sollten andere nennenswerte Nachteile bei Konsum des
     Getraenks auftreten.

     Zum Ueberpruefen, ob eine Kneipe den Richtlinien entspricht, kann man
     /obj/tools/kneipenanalyse.c benutzen.

BEISPIELE:
     inherit "/std/pub";
     void create() {
       ::create();
       SetProp(...); // Raumprops...

       AddDrink("Bier", "bier", 50, 5, 2, 8,
         ({ "Du trinkst Dein Bier in einem Zug aus.",
            "&& leert in einem Zug ein Bierglas." }) );

       AddDrink("Franzbehrger", ({ "franzbehrger", "behrger" }),
         80, 2, 0, 10, "franz" );
     }

     void franz(object zahler, object trinker)
     {
       tell_object(trinker,
         "Du trinkst Dein Franzbehrger. Hm... hat doch nicht alles, was "
         "ein Bier braucht!\nDir wird uebel. Schnell rennst Du raus.\n" );
       tell_room(this_object(),
         trinker->name(WER)+" verlaesst nach dem Genuss eines Franzbehrger "
         "fluchtartig\ndas Gebaeude.\n",({ trinker }) );
       trinker->move("/room/draussen", M_GO | M_SILENT);
     }

SIEHE AUCH:
     AddFood(), /std/pub.c, /obj/tools/kneipenanalyse.c, is_pub

