AddItem()

FUNKTION:
     varargs object AddItem(mixed file, int refresh, mixed props);

DEFINIERT IN:
     /std/room/items.c

ARGUMENTE:
     file
          String oder Array von Strings mit dem Namen des zu erzeugenden
          Objekts.
     refresh
          Wann soll das Objekt erneuert werden?
     props (optional)
          Weitere Eigenschaften fuer das Objekt.

BESCHREIBUNG:
     Abhaengig von file und props wird ein Objekt erzeugt und in den Raum
     bewegt. Dabei gibt es folgende Moeglichkeiten:
     file ist ein Dateiname.
          Es wird ein Clone von file erstellt oder (wenn props=1 ist) die
          Blueprint von file verwendet.
     file ist ein Array von Dateinamen.
          Es wird ein zufaelliger Name aus der Liste ausgewaehlt und von
          dieser Datei ein Clone erstellt bzw. (wenn props=1 ist) deren
          Blueprint verwendet.
     Uebergibt man fuer props ein Mapping mit dem Aufbau

     ([ prop_name : prop_wert, ... ]),

     so werden diese Properties im erzeugten Objekt gesetzt.

     Der Parameter refresh gibt an, was waehrend des Resets des Raumes
     geschehen soll. In <rooms.h> sind dazu folgende Moeglichkeiten
     definiert:

     REFRESH_NONE
          Das Objekt wird niemals erneuert; falls es zerstoert wurde, wird
          es erst dann wieder erzeugt, wenn der Raum erneut geladen wird.

     REFRESH_DESTRUCT
          Das Objekt wird nur dann erneuert, wenn es in der Zwischenzeit
          zerstoert wurde (bei NPCs ist das zum Beispiel der Fall, wenn sie
          getoetet wurden).

     REFRESH_REMOVE
          Das Objekt wird erneuert, wenn es sich nicht mehr im Raum
          befindet. Das kein sein, weil es zerstoert wurde, aber auch, weil
          es jemand mitgenommen hat (bei Gegenstaenden) oder es fortgegangen
          ist (bei NPCs, die herumlaufen).

     REFRESH_ALWAYS
          Das Objekt wird immer erneuert. Von dieser Refreshmethode sollte
          man allerdings Abstand nehmen, da sich sonst mit der Zeit
          gewaltige Mengen von Objekten ansammeln koennen!

     Hat man als file ein Array von Dateinamen uebergeben, so wird beim
     Reset jedesmal aufs Neue ein zufaelliges Objekt aus der Liste
     ausgewaehlt.

     Benutzt man Blueprints (props=1 mit REFRESH_REMOVE oder REFRESH_ALWAYS,
     so kann es zu ungewollten Ueberraschungen kommen, da die Blueprint dann
     unabhaengig von ihrem momentanen Aufenthaltsort wieder in den Raum
     bewegt wird, von dem sie erzeugt wurde!

RUECKGABEWERT:
     Das erzeugte Objekt.

BEMERKUNGEN:
     Wenn man Blueprints benutzt, sollte man daran denken, dass sich von
     dieser dann keine Clones mehr erstellen lassen!

BEISPIELE:

     // Ein Wuerfel, der sich nach Entfernen erneuert:
     AddItem( "/obj/misc/wuerfel", REFRESH_REMOVE);

     // Ein etwas veraenderter Wuerfel:
     AddItem( "/obj/misc/wuerfel", REFRESH_REMOVE,
           ([ P_SHORT  : "Ein schwerer Wuerfel",
              P_WEIGHT : 100 ]) );

     // Eine Blueprint:
     AddItem( "/mon/angsthase", REFRESH_DESTRUCT, 1);

     // Ein zufaelliges Objekt:
     AddItem( ({ "/obj/misc/lolli", "/obj/misc/bonbon",
                 "/obj/misc/bier" }), REFRESH_REMOVE );

SIEHE AUCH:
     RemoveItem(), /std/room/items.c

